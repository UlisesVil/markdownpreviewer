{"version":3,"sources":["assets/images/logo.svg","components/MarkdownPreviewer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","marked","setOptions","breaks","renderer","Renderer","link","href","title","text","MarkdownPreviewer","props","state","markdown","placeholder","editorMaximized","previewMaximized","handleChange","bind","handleEditorMaximize","handlePreviewMaximize","e","this","setState","target","value","classes","className","icon","onClick","onChange","React","Component","Toolbar","Editor","id","type","Preview","dangerouslySetInnerHTML","__html","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,iKCG3CC,IAAOC,WAAW,CACdC,QAAO,IAGX,IAAMC,EAAW,IAAIH,IAAOI,SAC5BD,EAASE,KAAO,SAASC,EAAMC,EAAOC,GAClC,MAAO,wCACCF,EADD,aACUE,GAAS,Q,IAIxBC,E,kDAEF,WAAaC,GAAO,IAAD,8BACf,cAAMA,IAEDC,MAAO,CACRC,SAAUC,EACVC,iBAAiB,EACjBC,kBAAkB,GAGtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAC5B,EAAKE,sBAAwB,EAAKA,sBAAsBF,KAA3B,gBAXd,E,yDAgBLG,GACVC,KAAKC,SAAS,CACVV,SAAUQ,EAAEG,OAAOC,U,6CAKvBH,KAAKC,SAAS,CACVR,iBAAkBO,KAAKV,MAAMG,oB,8CAKjCO,KAAKC,SAAS,CACVP,kBAAmBM,KAAKV,MAAMI,qB,+BAUlC,IAAMU,EACFJ,KAAKV,MAAMG,gBACP,CAAC,uBACD,mBACA,mBACJO,KAAKV,MAAMI,iBACP,CAAC,kBACD,wBACA,mBACA,CAAC,aACD,cACA,iBAOR,OAEI,6BAEI,yBAAKW,UAAWD,EAAQ,IACpB,kBAAC,EAAD,CACIE,KAAMF,EAAQ,GACdG,QAASP,KAAKH,qBACdV,KAAK,WAET,kBAAC,EAAD,CACII,SAAUS,KAAKV,MAAMC,SACrBiB,SAAUR,KAAKL,gBAIvB,yBAAKU,UAAU,cAGf,yBAAKA,UAAWD,EAAQ,IAEpB,kBAAC,EAAD,CACAjB,KAAK,UACLmB,KAAMF,EAAQ,GACdG,QAASP,KAAKF,wBAGd,kBAAC,EAAD,CACIP,SAAUS,KAAKV,MAAMC,iB,GAxFbkB,IAAMC,WAgGhCC,EAAS,SAACtB,GACZ,OACI,yBAAKgB,UAAU,WACX,uBAAGnB,MAAM,GACNmB,UAAU,qBACZhB,EAAMF,KACP,uBAAGoB,QAASlB,EAAMkB,QACfF,UAAWhB,EAAMiB,SAM1BM,EAAS,SAACvB,GACZ,OACI,8BAAUwB,GAAG,SACZV,MAAOd,EAAME,SACbiB,SAAUnB,EAAMmB,SAChBM,KAAK,UAKRC,EAAU,SAAC1B,GACb,OACI,yBAAKwB,GAAG,UACJG,wBAAyB,CAACC,OAC1BtC,IAAOU,EAAME,SAAU,CAAET,SAAUA,QAWzCU,EAAY,8qCAiDHJ,IChLA8B,MAXf,WACE,OACE,yBAAKb,UAAU,mBAEP,kBAAC,EAAD,QCFQc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.605b05af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport marked from 'marked'; /*https://forum.freecodecamp.org/t/marked-is-not-defined/300614/4 */\r\n\r\nmarked.setOptions({\r\n    breaks:true,\r\n});\r\n\r\nconst renderer = new marked.Renderer();\r\nrenderer.link = function(href, title, text){\r\n    return `<a target=\"_blank\"\r\n    href=\"${href}\">${text}` + \"</a>\"; \r\n}\r\n\r\n\r\nclass MarkdownPreviewer extends React.Component{\r\n\r\n    constructor (props){\r\n        super(props);\r\n\r\n        this.state ={\r\n            markdown: placeholder,\r\n            editorMaximized: false,\r\n            previewMaximized: false\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleEditorMaximize = this.handleEditorMaximize.bind(this);\r\n        this.handlePreviewMaximize = this.handlePreviewMaximize.bind(this);\r\n    }\r\n\r\n\r\n\r\n    handleChange (e) {\r\n        this.setState({\r\n            markdown: e.target.value\r\n        });\r\n    }\r\n\r\n    handleEditorMaximize () {\r\n        this.setState({\r\n            editorMaximized: !this.state.editorMaximized\r\n        });\r\n    }\r\n\r\n    handlePreviewMaximize () {\r\n        this.setState({\r\n            previewMaximized: !this.state.previewMaximized\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n\r\n\r\n        \r\n        const classes = \r\n            this.state.editorMaximized ? \r\n                ['editorWrap maximized',\r\n                'previewWrap hide',\r\n                'fas fa-compress'] :\r\n            this.state.previewMaximized ?\r\n                ['editorWrap hide',\r\n                'previewWrap maximized',\r\n                'fas fa-compress'] :\r\n                ['editorWrap',\r\n                'previewWrap',\r\n                'fas fa-expand'];\r\n//<i class=\"far fa-file-code\"></i>\r\n//fa-free-code-camp\r\n//<i class=\"fas fa-expand\"></i>\r\n//fa-arrows-alt\r\n//<i class=\"fas fa-compress\"></i>\r\n//fa fa-compress\r\n        return(\r\n\r\n            <div>\r\n\r\n                <div className={classes[0]}>\r\n                    <Toolbar \r\n                        icon={classes[2]}\r\n                        onClick={this.handleEditorMaximize}\r\n                        text=\"Editor\" />\r\n                    \r\n                    <Editor  \r\n                        markdown={this.state.markdown}\r\n                        onChange={this.handleChange} />\r\n\r\n                </div>\r\n\r\n                <div className=\"converter\">\r\n                </div>\r\n\r\n                <div className={classes[1]}>\r\n                    \r\n                    <Toolbar\r\n                    text=\"Preview\"\r\n                    icon={classes[2]} \r\n                    onClick={this.handlePreviewMaximize}\r\n                    />\r\n\r\n                    <Preview  \r\n                        markdown={this.state.markdown} />\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n};\r\n\r\nconst Toolbar= (props)=>{\r\n    return(\r\n        <div className=\"toolbar\">\r\n            <i title=\"\"\r\n               className=\"far fa-file-code\" />\r\n            {props.text}\r\n            <i onClick={props.onClick}\r\n               className={props.icon}> \r\n            </i>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Editor = (props) => {\r\n    return (\r\n        <textarea id=\"editor\"\r\n         value={props.markdown}\r\n         onChange={props.onChange}\r\n         type=\"text\" />\r\n    )\r\n}\r\n\r\n\r\nconst Preview = (props) => {\r\n    return(\r\n        <div id=\"preview\"\r\n            dangerouslySetInnerHTML={{__html: \r\n            marked(props.markdown, { renderer: renderer \r\n                })}} \r\n            />\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst placeholder=\r\n`# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`\r\n\r\n\r\nexport default MarkdownPreviewer;","import React from 'react';\nimport logo from './assets/images/logo.svg';\nimport './assets/css/App.css';\n\n\n//importar componentes\nimport MarkdownPreviewer from './components/MarkdownPreviewer.js';\n\n\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n\n            <MarkdownPreviewer />\n    \n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}